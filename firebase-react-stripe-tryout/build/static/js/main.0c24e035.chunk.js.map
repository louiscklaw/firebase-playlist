{"version":3,"sources":["layouts/DefaultLayout.js","pages/Home.js","pages/About.js","pages/Users.js","components/CheckoutForm.js","pages/CheckOut.js","App.js","serviceWorker.js","index.js"],"names":["stripePromise","loadStripe","DefaultLayout","children","to","stripe","Home","About","Users","CardElementContainer","id","BillingDetailsFields","Row","CheckoutForm","price","currency","onSuccessfulCheckout","useState","isProcessing","setProcessingTo","checkoutError","setCheckoutError","useStripe","elements","useElements","handleFormSubmit","ev","a","preventDefault","name","email","address","city","line1","state","postal_code","cardElement","getElement","axios","post","amount","clientSecret","data","createPaymentMethod","type","card","billing_details","paymentMethodReq","error","message","confirmCardPayment","payment_method","paymentMethod","cardElementOpts","iconStyle","style","base","color","fontSize","iconColor","invalid","complete","hidePostalCode","onSubmit","options","onChange","CheckOut","navigate","useNavigate","React","setAmount","setCurrency","href","value","onInput","e","target","PaySuccess","App","path","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0c24e035.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = loadStripe(\n  \"pk_test_51IR3dcFBIXj9AS8VMhc4PTNeUk3NOjYdaOtP7oTJ4V1KiWfJmJM4Xhd5PJ35AN9lZZw0eQeZbAF9j1NZDrzTyYL100iLiPJ8de\"\n);\n\nexport default function DefaultLayout({ children }) {\n  return (\n    <>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/users\">Users</Link>\n          </li>\n          <li>\n            <Link to=\"/checkout\">CheckOut</Link>\n          </li>\n        </ul>\n      </nav>\n      <Elements stripe={stripePromise}>{children}</Elements>\n    </>\n  );\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nexport default function Home() {\n  return <h2>Home</h2>\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nexport default function About() {\n  return <h2>About</h2>\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nexport default function Users() {\n  return <h2>Users</h2>\n}\n","import React from \"react\";\nimport { useState } from \"react\";\n\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\n\nimport \"./style.css\";\n\nconst CardElementContainer = ({ children }) => {\n  return <div id=\"CardElementContainer\">{children}</div>;\n};\n\nconst BillingDetailsFields = () => {\n  return <></>;\n};\n\nconst Row = ({ children }) => {\n  return <>{children}</>;\n};\n\nconst CheckoutForm = ({ price, currency, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleFormSubmit = async (ev) => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: `ev.target.name.value`,\n      email: `123@123.com`,\n      address: {\n        city: `ev.target.city.value`,\n        line1: `ev.target.address.value`,\n        state: `ev.target.state.value`,\n        postal_code: `00000`,\n      },\n    };\n\n    const cardElement = elements.getElement(\"card\");\n\n    try {\n      // const { data: clientSecret } = await axios.post(\"/api/payment_intents\", {\n      //   amount: price * 100\n      // });\n\n      const { data: clientSecret } = await axios.post(\n        \"https://us-central1-fir-tryout-f4e7a.cloudfunctions.net/stripe_helloworld\",\n        {\n          amount: price,\n          currency: currency,\n        }\n      );\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: {\n          name: \"test billing\",\n        },\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id,\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n  };\n\n  const iframeStyles = {\n    base: {\n      color: \"#fff\",\n      fontSize: \"16px\",\n      iconColor: \"#fff\",\n      \"::placeholder\": {\n        color: \"#87bbfd\",\n      },\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\",\n    },\n    complete: {\n      iconColor: \"#cbf4c9\",\n    },\n  };\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true,\n  };\n\n  const handleCardDetailsChange = (ev) => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <Row>\n        <BillingDetailsFields />\n      </Row>\n      <Row>\n        <CardElementContainer>\n          <CardElement\n            options={cardElementOpts}\n            onChange={handleCardDetailsChange}\n          />\n        </CardElementContainer>\n      </Row>\n      {checkoutError}\n      <Row>\n        {/* TIP always disable your submit button while processing payments */}\n        {/* <button disabled={isProcessing || !stripe}>\n          {isProcessing ? 'Processing...' : `Pay $${price}`}\n        </button> */}\n        <button>{isProcessing ? \"Processing...\" : `Pay $${price}`}</button>\n      </Row>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useNavigate,\n} from \"react-router-dom\";\n\nimport CheckoutForm from \"src/components/CheckoutForm\";\n\nexport default function CheckOut() {\n  const navigate = useNavigate();\n  const [amount, setAmount] = React.useState(1234);\n  const [currency, setCurrency] = React.useState(\"jpy\");\n\n  const getDonutPrice = () => {\n    return 123456;\n  };\n\n  return (\n    <>\n      <h2>checkout</h2>\n      <div>\n        <a href=\"https://dashboard.stripe.com/test/payments\">link to stripe</a>\n      </div>\n      <div>\n        <a href=\"https://console.firebase.google.com/u/0/project/fir-tryout-f4e7a/functions\">\n          link to firebase console\n        </a>\n      </div>\n      <div>\n        amount\n        <input\n          type=\"text\"\n          value={amount}\n          onInput={(e) => setAmount(e.target.value)}\n        />\n      </div>\n      <div>\n        currency\n        <input\n          type=\"text\"\n          value={currency}\n          onInput={(e) => setCurrency(e.target.value)}\n        />\n      </div>\n      <CheckoutForm\n        price={amount}\n        currency={currency}\n        onSuccessfulCheckout={() => navigate(\"/success\")}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport DefaultLayout from \"./layouts/DefaultLayout\";\n\nimport Home from \"src/pages/Home\";\nimport About from \"src/pages/About\";\nimport Users from \"src/pages/Users\";\nimport CheckOut from \"src/pages/CheckOut\";\n\nfunction PaySuccess() {\n  return <>Pay success</>;\n}\n\nexport default function App() {\n  return (\n    <Router>\n      <DefaultLayout>\n        <Routes>\n          <Route path=\"/checkout\" element={<CheckOut />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/users\" element={<Users />} />\n          <Route path=\"/success\" element={<PaySuccess />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </DefaultLayout>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}